# coding: utf-8

"""
    telegram-bot

    Сервис для взаимодействия с телеграммом

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from endpoints.models.get_greeting200_response_tg_bot_thing import GetGreeting200ResponseTgBotThing
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetGreeting200Response(BaseModel):
    """
    GetGreeting200Response
    """ # noqa: E501
    message: Optional[StrictStr] = None
    current_time: Optional[datetime] = Field(default=None, alias="currentTime")
    tg_bot_thing: Optional[GetGreeting200ResponseTgBotThing] = None
    __properties: ClassVar[List[str]] = ["message", "currentTime", "tg_bot_thing"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetGreeting200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tg_bot_thing
        if self.tg_bot_thing:
            _dict['tg_bot_thing'] = self.tg_bot_thing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetGreeting200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "currentTime": obj.get("currentTime"),
            "tg_bot_thing": GetGreeting200ResponseTgBotThing.from_dict(obj.get("tg_bot_thing")) if obj.get("tg_bot_thing") is not None else None
        })
        return _obj


